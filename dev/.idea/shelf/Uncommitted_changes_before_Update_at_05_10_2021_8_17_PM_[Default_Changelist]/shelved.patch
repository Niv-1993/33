Index: src/Business/ApplicationFacade/Objects/DriverServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/DriverServiceDTO.java b/src/Business/ApplicationFacade/outObjects/DriverServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/DriverServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/DriverServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/DriverServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/DriverServiceDTO.java	(date 1620661849834)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 
 import java.util.Objects;
 
Index: src/Business/ApplicationFacade/Objects/ItemServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/ItemServiceDTO.java b/src/Business/ApplicationFacade/outObjects/ItemServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/ItemServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/ItemServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/ItemServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/ItemServiceDTO.java	(date 1620661849847)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 
 import java.util.Objects;
 
Index: src/Business/ApplicationFacade/Objects/SupplierServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/SupplierServiceDTO.java b/src/Business/ApplicationFacade/outObjects/SupplierServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/SupplierServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/SupplierServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/SupplierServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/SupplierServiceDTO.java	(date 1620661849827)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 
 import java.util.Objects;
 
Index: src/Business/ApplicationFacade/Objects/TransportationServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/TransportationServiceDTO.java b/src/Business/ApplicationFacade/outObjects/TransportationServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/TransportationServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/TransportationServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/TransportationServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/TransportationServiceDTO.java	(date 1620661849865)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 import Business.Type.Area;
 import Business.Type.Pair;
 import java.time.LocalDate;
Index: src/DataAccess/Mapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DataAccess;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport java.sql.*;\r\n\r\npublic class Mapper {\r\n    private final static Logger log = Logger.getLogger(Mapper.class);\r\n    private static String dbname = \"database.db\";\r\n    private int currBranchID;\r\n\r\n    public Mapper() {\r\n    }\r\n\r\n\r\n    protected static Connection connect() throws Exception {\r\n        Class.forName(\"org.sqlite.JDBC\");\r\n        String url = \"jdbc:sqlite:\" + System.getProperty(\"user.dir\") + \"\\\\\" + dbname;\r\n        Connection conn;\r\n        try {\r\n            conn = DriverManager.getConnection(url);\r\n        } catch (SQLException e) {\r\n            log.warn(\"failed to make SQL connection\");\r\n            throw new Exception(\"cant connect\");\r\n        }\r\n        return conn;\r\n    }\r\n\r\n    public void updateIntInt(int id, int value, String column, String idn, String tableName) {\r\n        String query = String.format(\"UPDATE %s SET %s= ? WHERE %s= ?\", tableName, column, idn);\r\n        try (Connection con = connect();\r\n             PreparedStatement pre = con.prepareStatement(query)) {\r\n            pre.setInt(1, value);\r\n            pre.setInt(2, id);\r\n            pre.executeUpdate();\r\n        } catch (Exception e) {\r\n            System.out.println(\"[updateIntInt] ->\" +e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void updateIntboolean(int id, boolean value, String column, String idn, String tableName) {\r\n        String query = String.format(\"UPDATE %s SET %s= ? WHERE %s= ?\", tableName, column, idn);\r\n        try (Connection con = connect();\r\n             PreparedStatement pre = con.prepareStatement(query)) {\r\n            pre.setBoolean(1, value);\r\n            pre.setInt(2, id);\r\n            pre.executeUpdate();\r\n        } catch (Exception e) {\r\n            System.out.println(\"[updateIntboolean] ->\" +e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public void updateIntString(int id, String value, String column, String idn, String tableName) {\r\n        String query = String.format(\"UPDATE %s SET %s= ? WHERE %s= ?\", tableName, column, idn);\r\n        try (Connection con = connect();\r\n             PreparedStatement pre = con.prepareStatement(query)) {\r\n            pre.setString(1, value);\r\n            pre.setInt(2, id);\r\n            pre.executeUpdate();\r\n        } catch (Exception e) {\r\n            System.out.println(\"[updateIntString] ->\" +e.getMessage());\r\n        }\r\n    }\r\n\r\n    public int getNextID(String tableName,String column) {\r\n        int nextID = 1;\r\n        ResultSet res;\r\n        String query = String.format(\"SELECT Max(%s)+1 as nextID FROM %s\", column, tableName);\r\n        try (Connection con = connect(); PreparedStatement pre = con.prepareStatement(query)) {\r\n            res = pre.executeQuery();\r\n            if (res.next())\r\n                nextID = res.getInt(\"nextID\") == 0? 1: res.getInt(\"nextID\");\r\n        } catch (Exception e) {\r\n            System.out.println(\"[getNextID] ->\" +e.getMessage());\r\n        }\r\n        return nextID;\r\n    }\r\n\r\n    public void setCurrBranchID(int currBranchID) {\r\n        this.currBranchID = currBranchID;\r\n    }\r\n\r\n    public int getCurrBranchID() {\r\n        return currBranchID;\r\n    }\r\n\r\n    public void createTables() {\r\n        try (Connection con = connect();\r\n             Statement s = con.createStatement()) {\r\n            s.addBatch(getCreateEmployee());\r\n            s.addBatch(getCreateConstConstraint());\r\n            s.addBatch(getCreateTempConstraint());\r\n            s.addBatch(getCreateShift());\r\n            s.addBatch(getCreateDriver());\r\n            s.addBatch(getCreateBranches());\r\n            s.addBatch(getCreateRolesAndEmps());\r\n            s.addBatch(getCreateShiftsAndEmps());\r\n            s.addBatch(getCreateShiftsAndRolesAmount());\r\n            s.addBatch(getCreateDefaults());\r\n            s.addBatch(getCreateBranches());\r\n            s.addBatch(getCreateItem());\r\n            s.addBatch(getCreateSuppliers());\r\n            s.addBatch(getCreateSupplierItems());\r\n            s.addBatch(getCreateTrucks());\r\n            s.addBatch(getCreateTransportations());\r\n            s.addBatch(getCreateSuppliersItemsOnTran());\r\n            s.addBatch(getCreateBranchesItemsOnTran());\r\n            s.executeBatch();\r\n        } catch (Exception e) {\r\n            System.out.println(\"[createTables] ->\"+e.getMessage());\r\n        }\r\n    }\r\n\r\n    private String getCreateEmployee() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Employees\\\" (\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER UNIQUE,\\n\" +\r\n                \"\\t\\\"Name\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"StartWorkingDate\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Salary\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"BankID\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"BranchNumber\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"AccountNumber\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"EducationFund\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"DaysOff\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"SickDays\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Active\\\"\\tINTEGER NOT NULL DEFAULT 1,\\n\" +\r\n                \"\\t\\\"BID\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"EID\\\",\\\"BID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"BID\\\") REFERENCES \\\"Branches\\\"(\\\"BID\\\") ON DELETE SET NULL\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateConstConstraint() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"ConstConstraints\\\" (\\n\" +\r\n                \"\\t\\\"CID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"ShiftType\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"DayOfWeek\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Reason\\\"\\tTEXT,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"CID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"EID\\\") REFERENCES \\\"Employees\\\"(\\\"EID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateTempConstraint() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"TempConstraints\\\" (\\n\" +\r\n                \"\\t\\\"CID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"ShiftType\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Date\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Reason\\\"\\tTEXT,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"CID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"EID\\\") REFERENCES \\\"Employees\\\"(\\\"EID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateShift() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Shifts\\\" (\\n\" +\r\n                \"\\t\\\"SID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Date\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"ShiftType\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"WasSelfMake\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"BID\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"SID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"BID\\\") REFERENCES \\\"Branches\\\"(\\\"BID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\\n\";\r\n    }\r\n\r\n    private String getCreateDriver() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Drivers\\\" (\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"License\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"EID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"EID\\\") REFERENCES \\\"Employees\\\"(\\\"EID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateBranches() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Branches\\\" (\\n\" +\r\n                \"\\t\\\"BID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Street\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"City\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Number\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Enter\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Area\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"ContactName\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Phone\\\"\\t TEXT NOT NULL,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"BID\\\")\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateRolesAndEmps() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"RolesAndEmployees\\\" (\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Role\\\"\\tTEXT,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"EID\\\") REFERENCES \\\"Employees\\\"(\\\"EID\\\") ON DELETE CASCADE,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"EID\\\",\\\"Role\\\")\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateShiftsAndEmps() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"ShiftsAndEmployees\\\" (\\n\" +\r\n                \"\\t\\\"SID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"EID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Role\\\"\\tTEXT,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"SID\\\",\\\"EID\\\",\\\"Role\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"EID\\\") REFERENCES \\\"Employees\\\"(\\\"EID\\\") ON DELETE CASCADE,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"SID\\\") REFERENCES \\\"Shifts\\\"(\\\"SID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n\r\n    private String getCreateShiftsAndRolesAmount() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"ShiftsAndRolesAmount\\\" (\\n\" +\r\n                \"\\t\\\"SID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Role\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Amount\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"SID\\\",\\\"Role\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"SID\\\") REFERENCES \\\"Shifts\\\"(\\\"SID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\\n\";\r\n    }\r\n\r\n    private String getCreateDefaults(){\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Defaults\\\" (\\n\" +\r\n                \"\\t\\\"ShiftType\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"Role\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"Amount\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"BID\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"BID\\\",\\\"Role\\\",\\\"ShiftType\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"BID\\\") REFERENCES \\\"Branches\\\"(\\\"BID\\\") ON DELETE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n    private String getCreateBranchesItemsOnTran() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"BranchesItemsOnTran\\\" (\\n\" +\r\n                \"\\t\\\"BranID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"TranID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"ItemID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"Quantity\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"BranID\\\",\\\"TranID\\\",\\\"ItemID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"TranID\\\") REFERENCES \\\"Transportations\\\"(\\\"ID\\\") ,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"BranID\\\") REFERENCES \\\"Branches\\\"(\\\"BID\\\") ,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"ItemID\\\") REFERENCES \\\"Items\\\"(\\\"ID\\\") \\n\"+\r\n                \");\";\r\n    }\r\n    private String getCreateItem() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Items\\\" (\\n\" +\r\n                \"\\t\\\"ID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"Name\\\"\\tTEXT,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"ID\\\")\\n\" +\r\n                \");\";\r\n    }\r\n    private String getCreateSuppliers() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Suppliers\\\" (\\n\" +\r\n                \"\\t\\\"ID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"Street\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"City\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Number\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Enter\\\"\\tINTEGER NOT NULL,\\n\" +\r\n                \"\\t\\\"Area\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"ContactName\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\t\\\"Phone\\\"\\tTEXT NOT NULL,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"ID\\\")\\n\" +\r\n                \");\";\r\n    }\r\n    private String getCreateSupplierItems() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"SupplierItems\\\" (\\n\" +\r\n                \"\\t\\\"ItemID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"SupID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"ItemID\\\",\\\"SupID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"ItemID\\\") REFERENCES \\\"Items\\\"(\\\"ID\\\") \\n\"+\r\n                \");\";\r\n    }\r\n    private String getCreateSuppliersItemsOnTran() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"SupplierItemsOnTran\\\" (\\n\" +\r\n                \"\\t\\\"SupID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"TranID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"ItemID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"Quantity\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"SupID\\\",\\\"TranID\\\",\\\"ItemID\\\"),\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"SupID\\\") REFERENCES \\\"Suppliers\\\"(\\\"ID\\\") ,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"TranID\\\") REFERENCES \\\"Transportations\\\"(\\\"ID\\\") ,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"ItemID\\\") REFERENCES \\\"Items\\\"(\\\"ID\\\") \\n\"+\r\n                \");\";\r\n    }\r\n    private String getCreateTransportations() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Transportations\\\" (\\n\" +\r\n                \"\\t\\\"ID\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Area\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"Date\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"LeavingTime\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"Weight\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"driverID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"truckID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"ID\\\")\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"truckID\\\") REFERENCES \\\"Trucks\\\"(\\\"ID\\\") ,\\n\" +\r\n                \"\\tFOREIGN KEY(\\\"driverID\\\") REFERENCES \\\"Drivers\\\"(\\\"EID\\\") \\n\"+\r\n                \");\";\r\n    }\r\n    private String getCreateTrucks() {\r\n        return \"CREATE TABLE IF NOT EXISTS \\\"Trucks\\\" (\\n\" +\r\n                \"\\t\\\"ID\\\"\\tNUMERIC,\\n\" +\r\n                \"\\t\\\"MaxWeight\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"Model\\\"\\tTEXT,\\n\" +\r\n                \"\\t\\\"NetWeight\\\"\\tINTEGER,\\n\" +\r\n                \"\\t\\\"License\\\"\\tINTEGER,\\n\" +\r\n                \"\\tPRIMARY KEY(\\\"ID\\\")\\n\" +\r\n                \");\";\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DataAccess/Mapper.java b/src/DataAccess/Mapper.java
--- a/src/DataAccess/Mapper.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/DataAccess/Mapper.java	(date 1620662537709)
@@ -12,7 +12,7 @@
     }
 
 
-    protected static Connection connect() throws Exception {
+    protected Connection connect() throws Exception {
         Class.forName("org.sqlite.JDBC");
         String url = "jdbc:sqlite:" + System.getProperty("user.dir") + "\\" + dbname;
         Connection conn;
Index: src/Business/ApplicationFacade/Objects/BranchServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/BranchServiceDTO.java b/src/Business/ApplicationFacade/outObjects/BranchServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/BranchServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/BranchServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/BranchServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/BranchServiceDTO.java	(date 1620661849819)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 
 import java.util.Objects;
 
Index: src/Business/ApplicationFacade/Objects/TruckServiceDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/ApplicationFacade/Objects/TruckServiceDTO.java b/src/Business/ApplicationFacade/outObjects/TruckServiceDTO.java
rename from src/Business/ApplicationFacade/Objects/TruckServiceDTO.java
rename to src/Business/ApplicationFacade/outObjects/TruckServiceDTO.java
--- a/src/Business/ApplicationFacade/Objects/TruckServiceDTO.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/ApplicationFacade/outObjects/TruckServiceDTO.java	(date 1620661849841)
@@ -1,4 +1,4 @@
-package Business.ApplicationFacade.Objects;
+package Business.ApplicationFacade.outObjects;
 
 import java.util.Objects;
 
Index: src/Business/Transportation/ServiceFaced.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Business.Transportation;\r\nimport Business.ApplicationFacade.*;\r\nimport Business.ApplicationFacade.Objects.*;\r\nimport Business.Type.Area;\r\nimport Business.Type.Pair;\r\nimport Business.Employees.EmployeePKG.Driver;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.*;\r\n\r\npublic class ServiceFaced {\r\n    private final TruckService truckService;\r\n    private final SiteService siteService;\r\n    private final TransportationService transportationService;\r\n    private final ItemService itemService;\r\n    private final DataControl dataControl;\r\n    private final DriverRoleController drivers;\r\n\r\n\r\n\r\n    public ServiceFaced()  {\r\n        truckService = new TruckService();\r\n        siteService = new SiteService();\r\n        transportationService = new TransportationService();\r\n        itemService = new ItemService();\r\n        dataControl=new DataControl();\r\n        drivers = new DriverRoleController();\r\n    }\r\n\r\n    /**\r\n     *Getters for return an object by it's identifier.\r\n     * @param id: the identifier of the object.\r\n     * @return : the object.\r\n     */\r\n    public ResponseData<DriverServiceDTO> getDriver(int id){\r\n        try {\r\n            Driver driver = drivers.getDriver(id);\r\n            return (driver == null)? new ResponseData<>(\"No driver is available...\"):new ResponseData<>(toDriverServiceDTO(drivers.getDriver(id)));\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<BranchServiceDTO> getBranch(int id){\r\n        try{\r\n            return new ResponseData<>(toBranchServiceDTO(siteService.getBranch(id)));\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<SupplierServiceDTO> getSuppliers(int id){\r\n        try {\r\n            return new ResponseData<>(toSupplierServiceDTO(siteService.getSupplier(id)));\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TruckServiceDTO> getTruck(long id){\r\n        try{\r\n            return new ResponseData<>(toTruckServiceDTO(truckService.getTruck(id)));\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<ItemServiceDTO> getItem(long id){\r\n        try {\r\n            return new ResponseData<>(toItemServiceDTO(itemService.getItem(id)));\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Getters for every object's DTO list.\r\n     * Converts from business objects to presentation objects\r\n     * @return : Response with the objects list inside or an Exception if failed.\r\n     */\r\n    public ResponseData<List<DriverServiceDTO>> getDTODrivers(LocalDate date, LocalTime leavingTIme){\r\n        List<DriverServiceDTO> returnD = new LinkedList<>();\r\n        try {\r\n            List<Driver> drivers1 = drivers.chooseDriver(date,leavingTIme);\r\n            for (Driver d: drivers1) {\r\n                returnD.add(toDriverServiceDTO(d));\r\n            }\r\n            return new ResponseData<>(returnD);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<List<BranchServiceDTO>> getDTOBranches(){\r\n        List<BranchServiceDTO> returnB = new LinkedList<>();\r\n        try {\r\n            List<Branch> branches = siteService.getBranchesList();\r\n            for (Branch b: branches) {\r\n                returnB.add(toBranchServiceDTO(b));\r\n            }\r\n            return new ResponseData<>(returnB);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<List<SupplierServiceDTO>> getDTOSuppliers(){\r\n        List<SupplierServiceDTO> returnS = new LinkedList<>();\r\n        try {\r\n            List<Supplier> suppliers = siteService.getSuppliersList();\r\n            for (Supplier s:suppliers) {\r\n                returnS.add(toSupplierServiceDTO(s));\r\n            }\r\n            return new ResponseData<>(returnS);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public ResponseData<List<ItemServiceDTO>> getDTOItemsBySupplier(int id) {\r\n        List<ItemServiceDTO> returnS = new LinkedList<>();\r\n        try {\r\n            List<Item> supplierItems = itemService.getItemsBySupplier(id);\r\n            for (Item s:supplierItems) {\r\n                returnS.add(toItemServiceDTO(s));\r\n            }\r\n            return new ResponseData<>(returnS);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<List<TruckServiceDTO>> getDTOTrucks(){\r\n        List<TruckServiceDTO> returnT = new LinkedList<>();\r\n        try {\r\n            List<Truck> trucks = truckService.getTrucksList();\r\n            for (Truck t:trucks) {\r\n                returnT.add(toTruckServiceDTO(t));\r\n            }\r\n            return new ResponseData<>(returnT);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public ResponseData<List<TransportationServiceDTO>> getDTOTransportations() {\r\n        List<TransportationServiceDTO> returnT = new LinkedList<>();\r\n        try {\r\n            List<Transportation> transportations = transportationService.getTransportationsList();\r\n            for (Transportation t: transportations){\r\n                returnT.add(toTransportationServiceDTO(t));\r\n            }\r\n            return new ResponseData<>(returnT);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public ResponseData<List<ItemServiceDTO>> getAllDTOItems(){\r\n        List<ItemServiceDTO> returnI = new LinkedList<>();\r\n        try {\r\n            List<Item> allItems = itemService.getItemsList();\r\n            for (Item i: allItems){\r\n                returnI.add(toItemServiceDTO(i));\r\n            }\r\n            return new ResponseData<>(returnI);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setter methods, for each field of the transportation object try to update in the business layer\r\n     * @param t : the presentation's transportation object to show the user and to contact the business layer\r\n     * @return : Response object with the Business.Transportation obj inside or throws an Exception if failed.\r\n     */\r\n    public ResponseData<TransportationServiceDTO> setTransportationDriver(TransportationServiceDTO t){\r\n        try {\r\n            Driver d = drivers.getDriver(t.getDriver().getId());\r\n            transportationService.setDriver(t.getId(), d);\r\n            //if we success just return the same\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setTransportationDeliveryItems(TransportationServiceDTO t ){\r\n             HashMap<Branch,List<Pair<Item,Integer>>> deliveryItemsB = new HashMap<>();\r\n        try {\r\n            List<BranchServiceDTO> branches = t.getBranches();\r\n            for (BranchServiceDTO b: branches){\r\n                if(!drivers.checkAvailableStoreKeeperAndShifts(b.getId(),t.getDate(),t.getLeavingTime())){\r\n                    return new ResponseData<>(\"branch: \" + b.getId()+ \"does not have available store-keeper.\");\r\n                }\r\n            }\r\n            HashMap<BranchServiceDTO,List<Pair<ItemServiceDTO,Integer>>> deliveryItems = t.getDeliveryItems();\r\n            for (Map.Entry<BranchServiceDTO,List<Pair<ItemServiceDTO,Integer>>> entry: deliveryItems.entrySet()){\r\n                List<Pair<Item,Integer>> delivery = new LinkedList<>();\r\n                Branch b = siteService.getBranch(entry.getKey().getId());\r\n                for (Pair<ItemServiceDTO,Integer> item : entry.getValue()){\r\n                    delivery.add(new Pair<>(itemService.getItem(item.getFir().getId()),item.getSec()));\r\n                }\r\n                deliveryItemsB.put(b,delivery);\r\n            }\r\n            transportationService.setDeliveryItems(t.getId(),deliveryItemsB);\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setTransportationSuppliersItems(TransportationServiceDTO t ){\r\n        HashMap<Supplier,List<Pair<Item,Integer>>> deliveryItemsB = new HashMap<>();\r\n        try {\r\n            HashMap<SupplierServiceDTO,List<Pair<ItemServiceDTO,Integer>>> deliveryItems = t.getSuppliers();\r\n            for (Map.Entry<SupplierServiceDTO,List<Pair<ItemServiceDTO,Integer>>> entry: deliveryItems.entrySet()){\r\n                List<Pair<Item,Integer>> delivery = new LinkedList<>();\r\n                Supplier b = siteService.getSupplier(entry.getKey().getId());\r\n                for (Pair<ItemServiceDTO,Integer> item : entry.getValue()){\r\n                    delivery.add(new Pair<>(itemService.getItem(item.getFir().getId()),item.getSec()));\r\n                }\r\n                deliveryItemsB.put(b,delivery);\r\n            }\r\n            transportationService.setSuppliersItem(t.getId(),deliveryItemsB);\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public ResponseData<TransportationServiceDTO> setTransportationTruck(TransportationServiceDTO t){\r\n        try {\r\n            Truck truck = truckService.getTruck(t.getTruck().getId());\r\n            transportationService.setTruck(t.getId(),truck);\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setTransportationTime(TransportationServiceDTO t){\r\n        try {\r\n            transportationService.setTransportationTime(t.getId(),t.getLeavingTime());\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setTransportationDate(TransportationServiceDTO t){\r\n        try {\r\n            transportationService.setDate(t.getId(),t.getDate());\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setTransportation(TransportationServiceDTO t){\r\n        try {\r\n            List<BranchServiceDTO> Branches = t.getBranches();\r\n            for (BranchServiceDTO b: Branches){\r\n                drivers.addDriverToShiftAndStoreKeeper(b.getId(),t.getDriver().getId(),t.getDate(),t.getLeavingTime());\r\n            }\r\n            return new ResponseData<>(toTransportationServiceDTO( transportationService.saveTransportation(t.getId())));\r\n        }\r\n        catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n    public ResponseData<TransportationServiceDTO> setArea(TransportationServiceDTO t){\r\n        try {\r\n            transportationService.setArea(t.getId(),t.getArea());\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public ResponseData<TransportationServiceDTO> setTransportationWeight(TransportationServiceDTO t) {\r\n        try {\r\n            transportationService.setTransportationWeight(t.getId(),t.getWeight());\r\n            return new ResponseData<>(t);\r\n        }catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method for converting an object to its presentation's form.\r\n     * @param d :the business object.\r\n     * @return : it's form for the presentation.\r\n     */\r\n    private DriverServiceDTO toDriverServiceDTO(Driver d){\r\n        if(d==null){\r\n            return null;\r\n        }\r\n        return new DriverServiceDTO(d.getEID(),(d.getLicense()));\r\n    }\r\n    private BranchServiceDTO toBranchServiceDTO(Branch b){\r\n        if(b==null)\r\n            return null;\r\n        return new BranchServiceDTO(b.getPhone(),b.getContactName(),b.getId(),b.getShippingArea().getArea().toString());\r\n    }\r\n    private Pair<ItemServiceDTO,Integer> toItemPairServiceDTO(Pair<Item,Integer> i){\r\n        if(i==null)\r\n            return null;\r\n        return new Pair<>(new ItemServiceDTO(i.getFir().getId(),i.getFir().getName()),i.getSec());\r\n    }\r\n    private ItemServiceDTO toItemServiceDTO(Item i){\r\n        if(i==null)\r\n            return null;\r\n        return new ItemServiceDTO(i.getId(),i.getName());\r\n    }\r\n    private SupplierServiceDTO toSupplierServiceDTO(Supplier s){\r\n        if(s==null)\r\n            return null;\r\n        return new SupplierServiceDTO(s.getPhone(),s.getContactName(),s.getId(),s.getShippingArea().getArea().toString());\r\n    }\r\n    private TruckServiceDTO toTruckServiceDTO(Truck t){\r\n        if(t==null)\r\n            return null;\r\n        return new TruckServiceDTO(t.getId(),t.getLicense(),t.getMaxWeight(),t.getNetWeight(),t.getModel());\r\n    }\r\n    private TransportationServiceDTO toTransportationServiceDTO(Transportation t){\r\n        List<Pair<Item,Integer>> i;\r\n        HashMap<Supplier, List<Pair<Item, Integer>>> suppliers = t.getSuppliers();\r\n        HashMap<SupplierServiceDTO, List<Pair<ItemServiceDTO, Integer>>> newSup =null;\r\n        if(t.getSuppliers()!=null) {\r\n            newSup= new HashMap<>();\r\n            for (Map.Entry<Supplier, List<Pair<Item, Integer>>> entry : suppliers.entrySet()) {\r\n                i = entry.getValue();\r\n                List<Pair<ItemServiceDTO, Integer>> iDTO = new LinkedList<>();\r\n                for (Pair<Item, Integer> it : i) {\r\n                    iDTO.add(toItemPairServiceDTO(it));\r\n                }\r\n                newSup.put(toSupplierServiceDTO(entry.getKey()), iDTO);\r\n            }\r\n        }\r\n        HashMap<Branch, List<Pair<Item, Integer>>> items = t.getDeliveryItems();\r\n        HashMap<BranchServiceDTO, List<Pair<ItemServiceDTO, Integer>>> newItems=null;\r\n        if(t.getDeliveryItems()!=null) {\r\n            newItems=new HashMap<>();\r\n            for (Map.Entry<Branch, List<Pair<Item, Integer>>> entry : items.entrySet()) {\r\n                i = entry.getValue();\r\n                List<Pair<ItemServiceDTO, Integer>> iDTO = new LinkedList<>();\r\n                for (Pair<Item, Integer> it : i) {\r\n                    iDTO.add(toItemPairServiceDTO(it));\r\n                }\r\n                newItems.put(toBranchServiceDTO(entry.getKey()), iDTO);\r\n            }\r\n        }\r\n        return new TransportationServiceDTO(t.getId(),t.getDate(),t.getLeavingTime(),toDriverServiceDTO(t.getDriver()),toTruckServiceDTO(t.getTruck()),t.getWeight(),newItems,newSup,toArea( t.getShippingArea()));\r\n    }\r\n\r\n\r\n    private Area toArea(ShippingArea shippingArea) {\r\n        if(shippingArea==null)\r\n            return null;\r\n        return shippingArea.getArea();\r\n    }\r\n\r\n    /**\r\n     * Method for initializing new transportation to create.\r\n     * @return : returns the new transportation object\r\n     */\r\n    public ResponseData<TransportationServiceDTO> createNewTransportation() {\r\n\r\n        try {\r\n            return new ResponseData<>(toTransportationServiceDTO(transportationService.newTransportation()));\r\n        }\r\n        catch (Exception e){\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n\r\n    }\r\n    public ResponseData<TransportationServiceDTO> getTransportation(long id) {\r\n        try {\r\n            return new ResponseData<>(toTransportationServiceDTO(transportationService.getTransportationById(id)));\r\n        }catch (Exception e) {\r\n            return new ResponseData<>(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void deleteTrans() {\r\n        transportationService.deleteTransport();\r\n    }\r\n    public void addTruck(long id, int maxWeight, String model, int netWeight, int license){dataControl.addTruck(id, maxWeight,model,netWeight,license);}\r\n    public void addItem(long id , String name){dataControl.addItem(id,name);}\r\n    public void addSupplier(long sid,String street, String city,int number,int enter,String area,String contact,String phone){dataControl.addSupplier(sid,street,city,number,enter,area,contact,phone);}\r\n    public void addSuppliersItemsTrans(long supId, long tranId, long itemId, int quantity){dataControl.addSuppliersItemsTrans(supId,tranId,itemId,quantity);}\r\n    public void addBranchesItemsTrans(long branId, long tranId, long itemId, int quantity){dataControl.addBranchesItemsTrans(branId,tranId,itemId,quantity);}\r\n    public void addSupplierItems(long id, long supp){dataControl.addSupplierItems(id,supp);}\r\n    public void addTransportation(int i, String center, String s, String s1, int i1, int i2, int i3) {\r\n\r\n        dataControl.addTransportation(i,center,s,s1,i1,i2,i3);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/Transportation/ServiceFaced.java b/src/Business/Transportation/ServiceFaced.java
--- a/src/Business/Transportation/ServiceFaced.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Business/Transportation/ServiceFaced.java	(date 1620661849877)
@@ -1,6 +1,6 @@
 package Business.Transportation;
 import Business.ApplicationFacade.*;
-import Business.ApplicationFacade.Objects.*;
+import Business.ApplicationFacade.outObjects.*;
 import Business.Type.Area;
 import Business.Type.Pair;
 import Business.Employees.EmployeePKG.Driver;
Index: src/Presentation/TransportationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentation;\r\n\r\nimport Business.ApplicationFacade.Objects.*;\r\nimport Business.ApplicationFacade.ResponseData;\r\nimport Business.Transportation.ServiceFaced;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.List;\r\n\r\npublic class TransportationController {\r\n    private final ServiceFaced serviceControl;\r\n\r\n\r\n    public TransportationController(){\r\n        serviceControl = new ServiceFaced();\r\n    }\r\n\r\n    /**\r\n     * Setter methods, for each field of the transportation object try to update in the business layer\r\n     * @param t : the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    public void setDriverOnTransportation(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportationDriver(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n\r\n    public void setTruckOnTransportation(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportationTruck(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n    public void setTransportationWeight(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportationWeight(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n    public void setTransportation(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportation(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n    public void setTransportationDate(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportationDate(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n    public void setTransportationLeavingTime(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> tra = serviceControl.setTransportationTime(t);\r\n        if (tra.isError()){\r\n            System.out.println(tra.getError());\r\n        }\r\n    }\r\n    public void setSuppliersToTransportation(TransportationServiceDTO tr){\r\n        ResponseData<TransportationServiceDTO> res = serviceControl.setTransportationSuppliersItems(tr);\r\n        if(res.isError()){\r\n            System.out.println(res.getError());\r\n        }\r\n    }\r\n    public void setDeliveryItemsToTransportation(TransportationServiceDTO tr){\r\n        ResponseData<TransportationServiceDTO> res = serviceControl.setTransportationDeliveryItems(tr);\r\n        if(res.isError()){\r\n            System.out.println(res.getError());\r\n        }\r\n    }\r\n    public void setTransportationArea(TransportationServiceDTO t){\r\n        ResponseData<TransportationServiceDTO> res=serviceControl.setArea(t);\r\n        if(res.isError())\r\n        {\r\n            System.out.println(res.getError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Getters for every object's list.\r\n     * @return : the objects list\r\n     */\r\n    public List<DriverServiceDTO> getAllDrivers(LocalDate date, LocalTime leavingTime){\r\n        ResponseData<List<DriverServiceDTO>> res = serviceControl.getDTODrivers(date, leavingTime);\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public List<ItemServiceDTO> getAllItems(){\r\n        ResponseData<List<ItemServiceDTO>> res = serviceControl.getAllDTOItems();\r\n        if(res.isError()) {\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n\r\n    public List<SupplierServiceDTO> getAllSuppliers(){\r\n        ResponseData<List<SupplierServiceDTO>> res = serviceControl.getDTOSuppliers();\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public List<ItemServiceDTO> getItemsBySupplier(int id) {\r\n\r\n        ResponseData<List<ItemServiceDTO>> res=serviceControl.getDTOItemsBySupplier(id);\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public List<TransportationServiceDTO> getAllTransportations(){\r\n\r\n        ResponseData<List<TransportationServiceDTO>> res = serviceControl.getDTOTransportations();\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public List<TruckServiceDTO> getAllTrucks(){\r\n        ResponseData<List<TruckServiceDTO>> res = serviceControl.getDTOTrucks();\r\n        if(res.isError()) {\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public List<BranchServiceDTO> getAllBranches(){\r\n        ResponseData<List<BranchServiceDTO>> res = serviceControl.getDTOBranches();\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n\r\n    /**\r\n     * Getters for return an object by it's identifier.\r\n     * @param id: the identifier of the object.\r\n     * @return : the object.\r\n     */\r\n    public TransportationServiceDTO getTransportation(long id){\r\n        ResponseData<TransportationServiceDTO> res = serviceControl.getTransportation(id);\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n     }\r\n    public DriverServiceDTO getDriver(int id){\r\n        ResponseData<DriverServiceDTO> driver =  serviceControl.getDriver(id);\r\n        if(driver.isError()){\r\n            throw new IllegalArgumentException(driver.getError());\r\n        }\r\n        return driver.getData();\r\n    }\r\n    public ItemServiceDTO getItem(long id){\r\n        ResponseData<ItemServiceDTO> item =  serviceControl.getItem(id);\r\n        if(item.isError()){\r\n            throw new IllegalArgumentException(item.getError());\r\n        }\r\n        return item.getData();\r\n    }\r\n    public BranchServiceDTO getBranch(int id){\r\n        ResponseData<BranchServiceDTO> res = serviceControl.getBranch(id);\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public SupplierServiceDTO getSupplier(int id) {\r\n        ResponseData<SupplierServiceDTO> res = serviceControl.getSuppliers(id);\r\n        if (res.isError()) {\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n    public TruckServiceDTO getTruck(long id){\r\n        ResponseData<TruckServiceDTO> res = serviceControl.getTruck(id);\r\n        if(res.isError()) {\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n\r\n    /**\r\n     * Method for initializing new transportation to create.\r\n     * @return : returns the new transportation object\r\n     */\r\n    public TransportationServiceDTO createNewTransportation() {\r\n        ResponseData<TransportationServiceDTO> res = serviceControl.createNewTransportation();\r\n        if(res.isError()){\r\n            throw new IllegalArgumentException(res.getError());\r\n        }\r\n        return res.getData();\r\n    }\r\n\r\n    public void delete() {\r\n        try{\r\n            serviceControl.deleteTrans();\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public void addTruck(long id, int maxweight,String model, int netWeight, int license) {\r\n        try {\r\n            serviceControl.addTruck(id, maxweight, model, netWeight, license);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public void addItem(long id , String name){\r\n        try {\r\n        serviceControl.addItem(id,name);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public void addSupplier(long sid,String street, String city,int number,int enter,String area,String contact,String phone){\r\n        try {\r\n        serviceControl.addSupplier(sid,street,city,number,enter,area,contact,phone);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public void addSupplierItems(long id,long supplier) {\r\n        try {\r\n            serviceControl.addSupplierItems(id, supplier);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void addSuppliersItemsTrans(long supid,long tranid, long itemid,int quantity) {\r\n        try {\r\n            serviceControl.addSuppliersItemsTrans(supid, tranid, itemid, quantity);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n    public void addBranchesItemsTrans(long branid,long tranid, long itemid,int quantity) {\r\n        try {\r\n            serviceControl.addBranchesItemsTrans(branid, tranid, itemid, quantity);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void addTransportation(int i, String center, String s, String s1, int i1, int i2, int i3) {\r\n        try {\r\n            serviceControl.addTransportation(i, center, s, s1, i1, i2, i3);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentation/TransportationController.java b/src/Presentation/TransportationController.java
--- a/src/Presentation/TransportationController.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Presentation/TransportationController.java	(date 1620661849855)
@@ -1,7 +1,7 @@
 package Presentation;
 
-import Business.ApplicationFacade.Objects.*;
 import Business.ApplicationFacade.ResponseData;
+import Business.ApplicationFacade.outObjects.*;
 import Business.Transportation.ServiceFaced;
 
 import java.time.LocalDate;
Index: src/Presentation/Menu/TransportationMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentation.Menu;\r\n\r\nimport Presentation.Controllers;\r\nimport Presentation.TransportationController;\r\nimport Business.ApplicationFacade.Objects.*;\r\nimport Business.Type.Area;\r\nimport Business.Type.Pair;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TransportationMenu extends Menu{\r\n    private int option;\r\n    private int subOption;\r\n    private final int numOfOptions = 7;\r\n    private final Area[] areas={Area.South,Area.North,Area.Center };\r\n    private final TransportationController transportationController;\r\n    private boolean finish;\r\n\r\n\r\n    public TransportationMenu(Controllers r , Scanner input){\r\n        super(r,input);\r\n        transportationController =new TransportationController();\r\n        this.option=0;\r\n        subOption=0;\r\n        finish=false;\r\n    }\r\n\r\n    @Override\r\n    public void show(){\r\n        while(endOfProgram()){\r\n            chooseOption();\r\n            nextStep();\r\n        }\r\n    }\r\n    /**\r\n     *The starting choice of the user if to keep run the system or shut it off.\r\n     */\r\n    public void chooseOption(){\r\n        System.out.println(\"\\n*************************************************\");\r\n        System.out.println(\"******************* Transportation Menu *******************\");\r\n        System.out.println(\"*************************************************\\n\");\r\n        System.out.print(\"1) See all Transportations.\\n2) Create a new Business.Transportation.\\nOption: \");\r\n        option = chooseOp(numOfOptions);\r\n        System.out.println(\"\");\r\n    }\r\n\r\n    /**\r\n     * prints menu and received the user's choice for which area is the new transportation.\r\n     * @param t : the presentation's transportation object to show the user and to contact the business layer.\r\n     */\r\n    private void chooseArea(TransportationServiceDTO t){\r\n        System.out.println(\"Please chose an Area\");\r\n        for (int i=0; i<areas.length;i++) {\r\n            System.out.println((i+1)+\") \"+areas[i]);\r\n        }\r\n        System.out.print(\"Area number: \");\r\n        int area=chooseOp(areas.length)-1;\r\n        System.out.println(\"\");\r\n        Area chosen=areas[area];\r\n        t.setArea(chosen);\r\n        transportationController.setTransportationArea(t);\r\n    }\r\n\r\n    /**\r\n     *Asks and received the user's input for the wanted trans hour.\r\n     * @param tran : the presentation's transportation object to show the user and to contact the business layer.\r\n     */\r\n    private void chooseTime(TransportationServiceDTO tran){\r\n        boolean success=false;\r\n        while (!success) {\r\n            try {\r\n                System.out.print(\"Please chose time for transportation.\\nUse the format hh:mm.\\nTime:\");\r\n                String tim = input.next();\r\n                System.out.println(\"\");\r\n                LocalTime time = LocalTime.parse(tim);\r\n                tran.setLeavingTime(time);\r\n                transportationController.setTransportationLeavingTime(tran);\r\n                success = true;\r\n            }\r\n            catch (Exception e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks and received the user's input for the wanted trans date.\r\n     * @param tran: the presentation's transportation object to show the user and to contact the business layer.\r\n     */\r\n    private void chooseDate(TransportationServiceDTO tran){\r\n        boolean success=false;\r\n        while (!success) {\r\n            try {\r\n                System.out.print(\"Please chose a date for transportation.\\nUse the format yyyy-mm-dd.\\nDate:\");\r\n                String tim = input.next();\r\n                System.out.println(\"\");\r\n                LocalDate date=LocalDate.parse(tim);\r\n                tran.setDate(date);\r\n                transportationController.setTransportationDate(tran);\r\n                success = true;\r\n            }\r\n            catch (Exception e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is the add transportation menu method. the whole user's input and dialog runs/called from here.\r\n     */\r\n    private void chooseAddOption(){\r\n\r\n        System.out.println(\"\\n*************************************************\");\r\n        System.out.println(\"************ New Business.Transportation Menu ************\");\r\n        System.out.println(\"*************************************************\\n\");\r\n        finish=false;\r\n        TransportationServiceDTO newTrans= transportationController.createNewTransportation();\r\n        chooseArea(newTrans);\r\n        chooseDate(newTrans);\r\n        chooseTime(newTrans);\r\n        while (!finish) {\r\n            System.out.println(\"\\nChoose an option:\");\r\n            System.out.println(\"0) Cancel transportation\");\r\n            System.out.println(\"1) Add a truck\");\r\n            System.out.println(\"2) Add a driver\");\r\n            System.out.println(\"3) Add a suppliers and items\");\r\n            System.out.println(\"4) Add branches and items to a branches\");\r\n            System.out.println(\"5) Set the truck weight\");\r\n            System.out.println(\"6) Submit your transportation\");\r\n            System.out.print(\"Option:\");\r\n            subOption = chooseOp(numOfOptions);\r\n            switch (subOption) {\r\n                case 1:  chooseTruck(newTrans); break;\r\n                case 2 : chooseDriver(newTrans); break;\r\n                case 3 : chooseSupplier(newTrans); break;\r\n                case 4 : chooseBranch(newTrans); break;\r\n                case 5 : chooseWeight(newTrans); break;\r\n                case 6 : submit(newTrans); break;\r\n                case 0: {Delete(); return;}\r\n            }\r\n            System.out.println(newTrans);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete new transportation\r\n     */\r\n    private void Delete() {\r\n\r\n        try {\r\n            transportationController.delete();\r\n        }\r\n        catch (Exception e){\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Asks and received the user's input for the wanted trans weight.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer.\r\n     */\r\n    private void chooseWeight(TransportationServiceDTO t){\r\n        try {\r\n            System.out.println(\"\\n*************************************************\");\r\n            System.out.println(\"************ Adding Weight ************\");\r\n            System.out.println(\"*************************************************\\n\");\r\n            System.out.println(\"please enter transportation total weight:\");\r\n            System.out.print(\"\\nWeight: \");\r\n            int chose = input.nextInt();\r\n            System.out.println(\"\");\r\n            t.setWeight(chose);\r\n            transportationController.setTransportationWeight(t);\r\n        }\r\n        catch (Exception e){\r\n            t.setTruck(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Method that called by the addTransportation menu. try to close the new trans with the all new data.\r\n     * If one field is empty the method will no allow.\r\n     * If finished, back to first menu.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    private void submit(TransportationServiceDTO t){\r\n        try {\r\n            System.out.println(\"\\nTrying to submit transportation... \\n\\n\");\r\n            transportationController.setTransportation(t);\r\n            finish=true;\r\n            System.out.println(\"Success to submit new transportation! \");\r\n        }\r\n        catch (Exception e){\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Menu of suppliers and their items.\r\n     * The method ask for a flow of suppliers until -1 number.\r\n     * After each input, ask in a loop for item and quantity until -2 number.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    private void chooseSupplier(TransportationServiceDTO t) {\r\n        try {\r\n            System.out.println(\"\\n*************************************************\");\r\n            System.out.println(\"************ Adding Suppliers ************\");\r\n            System.out.println(\"*************************************************\\n\");\r\n            System.out.println(\"Select suppliers and items from the lists below:\");\r\n            printAllSuppliers();\r\n            int chose;\r\n            HashMap<SupplierServiceDTO, List<Pair<ItemServiceDTO,Integer>>> suppliers=new HashMap<>();\r\n            do {\r\n                System.out.print(\"\\nselect supplier, to end press -1:\\nSupplier Id: \");\r\n                chose = input.nextInt();\r\n                System.out.println(\"\");\r\n                if(chose==-1)\r\n                    break;\r\n                List<Pair<ItemServiceDTO, Integer>> lis =new LinkedList<>();\r\n                long id;\r\n                int num;\r\n                do{\r\n                    printItemsBySupplier(chose);\r\n                    System.out.println(\"Enter item and quantity,to end press -2:\");\r\n                    System.out.print(\"Item Id: \");\r\n                    id= input.nextLong();\r\n                    if(id==-2)\r\n                        break;\r\n                    System.out.print(\"Quantity: \");\r\n                    num= input.nextInt();\r\n                    System.out.println(\"\");\r\n\r\n                    lis.add(new Pair<>(transportationController.getItem(id),num));\r\n                }\r\n                while(true);\r\n                suppliers.put(transportationController.getSupplier(chose), lis);\r\n            }\r\n            while(true);\r\n            t.setSuppliers(suppliers);\r\n            transportationController.setSuppliersToTransportation(t);\r\n        }\r\n        catch (Exception e){\r\n            t.setSuppliers(null);\r\n            System.out.println(\"Error: \"+e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Menu of suppliers and their items.\r\n     * The method ask for a flow of branches until -1 number.\r\n     * After each input, ask in a loop for item and quantity until -2 number.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    private void chooseBranch(TransportationServiceDTO t) {\r\n        try {\r\n            System.out.println(\"\\n*************************************************\");\r\n            System.out.println(\"**************** Adding Suppliers ***************\");\r\n            System.out.println(\"*************************************************\\n\");\r\n            System.out.println(\"Select branches and items from the lists below:\");\r\n            printAllBranches();\r\n            PrintAllItems();\r\n            int chose;\r\n            HashMap<BranchServiceDTO, List<Pair<ItemServiceDTO,Integer>>> branches=new HashMap<>();\r\n            do {\r\n                System.out.print(\"\\nselect branch, to end press -1:\\nBranch Id:\");\r\n                chose = input.nextInt();\r\n                System.out.println(\"\");\r\n                if(chose==-1)\r\n                    break;\r\n                List<Pair<ItemServiceDTO, Integer>> lis =new LinkedList<>();\r\n                long id;\r\n                int num;\r\n                do{\r\n                    System.out.println(\"Enter item and quantity,to end press -2:\");\r\n                    System.out.print(\"Item Id: \");\r\n                    id= input.nextLong();\r\n                    if(id==-2)\r\n                        break;\r\n                    System.out.print(\"Quantity: \");\r\n                    num= input.nextInt();\r\n\r\n                    lis.add(new Pair<>(transportationController.getItem(id),num));\r\n                }\r\n                while(true);\r\n                branches.put(transportationController.getBranch(chose), lis);\r\n            }\r\n            while(true);\r\n            t.setDeliveryItems(branches);\r\n            transportationController.setDeliveryItemsToTransportation(t);\r\n        }\r\n        catch (Exception e){\r\n            t.setDeliveryItems(null);\r\n            System.out.println(\"Error: \"+e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Asks and received from user the driver for the transportation by id number.\r\n     * If the addition could not complete, the transportation's driver's details will not be changed.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    private void chooseDriver(TransportationServiceDTO t) {\r\n        try {\r\n            System.out.println(\"\\n*************************************************\");\r\n            System.out.println(\"  ****************** Adding Driver ****************\");\r\n            System.out.println(\"*************************************************\\n\");\r\n            System.out.println(\"please select driver id from the trucks list below:\\n\");\r\n            printAllDrivers(t.getDate(),t.getLeavingTime());\r\n            System.out.print(\"\\nId: \");\r\n            int chose = input.nextInt();\r\n            System.out.println(\"\");\r\n            t.setDriver(transportationController.getDriver(chose));\r\n            transportationController.setDriverOnTransportation(t);\r\n        }\r\n        catch (Exception e){\r\n            t.setDriver(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Asks and received from user the truck for the transportation by id number.\r\n     * If the addition could not complete, the transportation's truck's details will not be changed.\r\n     * @param t: the presentation's transportation object to show the user and to contact the business layer\r\n     */\r\n    private void chooseTruck(TransportationServiceDTO t) {\r\n\r\n        try {\r\n            System.out.println(\"\\n*************************************************\");\r\n            System.out.println(\"****************** Adding Truck *****************\");\r\n            System.out.println(\"*************************************************\\n\");\r\n            System.out.println(\"Type a truck id from the list below:\\n\");\r\n            printAllTucks();\r\n            System.out.print(\"\\nId: \");\r\n            long chose = input.nextLong();\r\n            System.out.println(\"\");\r\n            t.setTruck(transportationController.getTruck(chose));\r\n            transportationController.setTruckOnTransportation(t);\r\n        }\r\n        catch (Exception e){\r\n            t.setTruck(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Prints to the user all the available drivers in the database\r\n     */\r\n    public void printAllDrivers(LocalDate date, LocalTime leavingTime){\r\n       List<DriverServiceDTO> lis= transportationController.getAllDrivers(date,leavingTime);\r\n        for (DriverServiceDTO dri:lis) { System.out.println(dri); }\r\n    }\r\n\r\n    /**\r\n     *Prints to the user all the available trucks in the database\r\n     */\r\n    public void printAllTucks(){\r\n        List<TruckServiceDTO> lis= transportationController.getAllTrucks();\r\n        for (TruckServiceDTO tru:lis) {\r\n            System.out.println(tru);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Prints to the user all the available branches in the database\r\n     */\r\n    public void printAllBranches(){\r\n        List<BranchServiceDTO> bra= transportationController.getAllBranches();\r\n        for (BranchServiceDTO tru:bra) { System.out.println(tru); }\r\n    }\r\n\r\n    /**\r\n     *Prints to the user all the available suppliers in the database\r\n     */\r\n    public void printAllSuppliers(){\r\n        List<SupplierServiceDTO> sup= transportationController.getAllSuppliers();\r\n        for (SupplierServiceDTO tru:sup) { System.out.println(tru); }\r\n\r\n    }\r\n    public void printItemsBySupplier(int id){\r\n        List<ItemServiceDTO> items = transportationController.getItemsBySupplier(id);\r\n        for(ItemServiceDTO item: items) System.out.println(item);\r\n    }\r\n    /**\r\n     *Prints to the user all the available items in the database\r\n     */\r\n    public void PrintAllItems(){\r\n        List<ItemServiceDTO> sup= transportationController.getAllItems();\r\n        for (ItemServiceDTO tru:sup) { System.out.println(tru); }\r\n\r\n    }\r\n\r\n    /**\r\n     *Prints to the user all the available transportations in the database\r\n     * Used for the transportations printing option in the menu.\r\n     */\r\n    public void printAllTransportations(){\r\n        System.out.println(\"\\n*************************************************\");\r\n        System.out.println(\"************ Printing Business.Transportation ************\");\r\n        System.out.println(\"*************************************************\\n\");\r\n        List<TransportationServiceDTO> sup= transportationController.getAllTransportations();\r\n        for (TransportationServiceDTO tru:sup) { System.out.println(tru); }\r\n    }\r\n\r\n    /**\r\n     *The starting menu of the system.\r\n     * runs by the main of the project.\r\n     * By user's input it keep running the system or shut it off.\r\n     * @return : if to keep run the program or terminate it\r\n     */\r\n    public boolean endOfProgram(){\r\n        System.out.println(\"\\n*************************************************\");\r\n        System.out.println(\"****************** Start menu *******************\");\r\n        System.out.println(\"*************************************************\\n\");\r\n        System.out.println(\"Hello.\\nPlease choose an option:\");\r\n        System.out.print(\"1)Continue\\n2)Exit\\nOption: \");\r\n        int numOfEndProgramOp = 2;\r\n        return chooseOp(numOfEndProgramOp) == 1;\r\n    }\r\n\r\n    /**\r\n     *Method to receive an input from the user with boundary limit.\r\n     * @param con : the num of options the user can type. For boundary check.\r\n     * @return : the choice of the user.\r\n     */\r\n    private int chooseOp(int con){\r\n        boolean validInput = false;\r\n        int userOption = -1;\r\n        while (!validInput) {\r\n            userOption = input.nextInt();\r\n            if((userOption <= con) && (userOption >= 0)) {\r\n                validInput = true;\r\n            }else {\r\n                System.out.println(\"your choose without bounds\");\r\n            }\r\n        }\r\n        return userOption;\r\n    }\r\n\r\n    /**\r\n     *Method to direct the menu by the user's choice in the starting menu.\r\n     */\r\n    public void nextStep() {\r\n\r\n        if(option==2)\r\n            chooseAddOption();\r\n        else\r\n            printAllTransportations();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Presentation/Menu/TransportationMenu.java b/src/Presentation/Menu/TransportationMenu.java
--- a/src/Presentation/Menu/TransportationMenu.java	(revision 95c76e02ba2fe62b964589f085066c7328caf4f3)
+++ b/src/Presentation/Menu/TransportationMenu.java	(date 1620661849808)
@@ -1,8 +1,8 @@
 package Presentation.Menu;
 
+import Business.ApplicationFacade.outObjects.*;
 import Presentation.Controllers;
 import Presentation.TransportationController;
-import Business.ApplicationFacade.Objects.*;
 import Business.Type.Area;
 import Business.Type.Pair;
 import java.time.LocalDate;
